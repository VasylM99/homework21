{"version":3,"sources":["components/user.js","store/actions/users.actions.js","components/users.js","components/userInputs.js","components/postInputs.js","store/actions/posts.actions.js","components/post.js","components/posts.js","App.js","store/reducers/posts.reducers.js","store/reducers/users.reducers.js","store/reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["User","props","className","src","avatar","alt","name","username","getUsers","dispatch","a","axios","get","users","type","payload","data","Users","useSelector","state","useDispatch","useEffect","map","user","UserInputs","useState","setName","setAvatar","setUsername","placeholder","value","onChange","event","target","onClick","post","PostInputs","content","setContent","image","setImage","authors","author","setAuthor","Number","id","userId","Post","date","aria-hidden","Posts","posts","postsWithUsers","find","App","to","path","initialState","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b84a1eac.chunk.js","sourcesContent":["import React  from 'react';\r\nimport './style.css';\r\n\r\n\r\n\r\nfunction User(props) {   \r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div>\r\n                <img className=\"avatar\" src={props.avatar} alt='avatar'/>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"info\">\r\n                    <div className=\"info-acc\">\r\n                        <span className=\"name\">{props.name}</span>\r\n                        <span className=\"nickname\">{props.username}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>            \r\n    )\r\n}\r\n\r\n\r\nexport default User;","import axios from 'axios';\r\n\r\nexport const CREATE_USER= 'CREATE_USER';\r\nexport const GET_USERS= 'GET_USERS';\r\n\r\nexport function getUsers() {\r\n    return async function (dispatch) {\r\n        const users= await axios.get('https://tweets.globalofficiallottery.com/users/');\r\n        dispatch({\r\n            type: GET_USERS,\r\n            payload: users.data.data\r\n        }); \r\n    };\r\n}\r\nexport function createUser(data) {\r\n    return async function (dispatch) {\r\n        await axios.post('https://tweets.globalofficiallottery.com/users/', data);\r\n        dispatch({\r\n            type: CREATE_USER\r\n        }); \r\n    };\r\n}","import React, { useEffect }  from 'react';\r\nimport User from './user';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getUsers } from '../store/actions/users.actions';\r\n\r\nfunction Users() {\r\n    const users = useSelector(state =>state.users.users);\r\n    const dispatch= useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getUsers())\r\n    }, []);\r\n    return users.map(user => \r\n        <User \r\n            avatar={user.avatar}\r\n            name={user.name}\r\n            username={user.username}\r\n        />\r\n        \r\n    )     \r\n};\r\n\r\nexport default Users;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { CREATE_USER, createUser } from '../store/actions/users.actions';\r\n\r\n\r\nfunction UserInputs(props) {\r\n    const [name, setName] = useState('');\r\n    const [avatar, setAvatar]= useState('');\r\n    const [username, setUsername] = useState('');\r\n    const dispatch= useDispatch();\r\n    \r\n    const handleNameChange = (event)=>{\r\n        setName(event.target.value)\r\n    }\r\n    const handleAvatarChange = (event)=>{\r\n        setAvatar(event.target.value)\r\n    }\r\n    const handleUsernameChange = (event)=>{\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n\r\n    const addUser = () => {\r\n        dispatch(createUser({\r\n            name,\r\n            avatar,\r\n            username\r\n        }));\r\n        setName('')\r\n        setAvatar('')\r\n        setUsername('')\r\n    }\r\n    return(\r\n        <div className='layout-wrapper'>\r\n            <div>\r\n                <input placeholder='Name' value={name} onChange={handleNameChange}/>\r\n            </div>\r\n            <div>\r\n                <input value={avatar} placeholder='Avatar' onChange={handleAvatarChange}/>\r\n            </div>\r\n            <div>\r\n                <input value={username} placeholder='Username' onChange={handleUsernameChange} />\r\n            </div>\r\n            <button onClick={addUser}>Add user</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default UserInputs;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { CREATE_POST, createPost } from '../store/actions/posts.actions';\r\nimport { getUsers } from '../store/actions/users.actions';\r\n\r\nfunction PostInputs(props) {\r\n    const [content, setContent] = useState('');\r\n    const [image, setImage]= useState('');\r\n    \r\n    const authors= useSelector(state => state.users.users);\r\n\r\n    const [author, setAuthor] = useState(authors[0]);\r\n    const dispatch= useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getUsers())\r\n    }, []);\r\n\r\n    const handleContentChange = (event)=>{\r\n        setContent(event.target.value)\r\n    }\r\n    const handleImageChange = (event)=>{\r\n        setImage(event.target.value)\r\n    }\r\n\r\n    const handleAuthorChange = (event) => {\r\n        setAuthor(Number(event.target.value));\r\n    }\r\n\r\n    const addPost = () => {\r\n        dispatch(createPost({\r\n            userId: author,\r\n            content,\r\n            image\r\n        }));\r\n        setContent('')\r\n        setImage('')\r\n    }\r\n    return(\r\n        <div className='layout-wrapper'>\r\n            <div>\r\n                <input placeholder='Content' value={content} onChange={handleContentChange}/>\r\n            </div>\r\n            <div>\r\n                <input value={image} placeholder='Image' onChange={handleImageChange}/>\r\n            </div>\r\n            <div>\r\n                <select onChange={handleAuthorChange}           >\r\n                    {authors.map(author => \r\n                        <option \r\n                            value={author.id}\r\n                        >{author.name}</option>) }\r\n                </select>\r\n            </div>\r\n            <button onClick={addPost}>Add post</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PostInputs;","import axios from 'axios';\r\n\r\nexport const CREATE_POST = 'CREATE_POST';\r\nexport const GET_POSTS = 'GET_POSTS';\r\n\r\nexport function getPosts() {\r\n    return async function (dispatch) {\r\n        \r\n        const posts = await axios.get('https://tweets.globalofficiallottery.com/tweets/');\r\n        const users = await axios.get('https://tweets.globalofficiallottery.com/users/');\r\n        const postsWithUsers = posts.data.data.map(post => ({\r\n            ...post,\r\n            author: users.data.data.find(user=> post.userId === user.id),\r\n        }))\r\n        dispatch({\r\n            type: GET_POSTS,\r\n            payload: postsWithUsers\r\n        }); \r\n    };\r\n}\r\nexport function createPost(data) {\r\n    return async function (dispatch) {\r\n        await axios.post('https://tweets.globalofficiallottery.com/tweets/', data);\r\n        dispatch({\r\n            type: CREATE_POST\r\n        }); \r\n    };\r\n}","import React  from 'react';\r\nimport './style.css';\r\n\r\n\r\n\r\nfunction Post(props) {   \r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div>\r\n                <img className=\"avatar\" src={props.author.avatar} alt='avatar'/>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"info\">\r\n                    <div className=\"info-acc\">\r\n                        <span className=\"name\">{props.author.name}</span>\r\n                        <span className=\"nickname\">{props.author.username}</span>\r\n                        <span className=\"date\">{props.date}</span>\r\n                    </div>\r\n                    <div>\r\n                        <i className=\"fa  fa-chevron-down\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n                    <div className=\"content-text\">{props.content}</div>\r\n                <div className=\"main-content\">\r\n                        <img className=\"image\" src={props.image} alt='content image'/>\r\n                        <div className=\"footer\">\r\n                            <i className=\"fa fa-comment\" aria-hidden=\"true\">\r\n                                <span>482</span>\r\n                            </i>\r\n                            <i className=\"fa fa-retweet\" aria-hidden=\"true\">\r\n                                <span>146</span>\r\n                            </i>\r\n                            <i className=\"fa fa-heart-o \" aria-hidden=\"true\">\r\n                                <span>887</span>\r\n                            </i>\r\n                            <i className=\"fa fa-cloud-upload\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        </div>            \r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React, { useEffect } from 'react';\r\nimport Post from './post';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPosts } from '../store/actions/posts.actions';\r\n\r\n\r\n\r\nfunction Posts() {\r\n    const posts = useSelector(state => state.posts.posts);\r\n    const dispatch= useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getPosts())\r\n    }, []);\r\n\r\n\r\n    return posts.map(post =>\r\n        <Post\r\n            author={post.author}\r\n            content={post.content}\r\n            image={post.image}\r\n            date={post.date}\r\n        />\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default Posts;","import React from 'react';\nimport Users from'./components/users';\nimport UserInputs from './components/userInputs';\nimport PostInputs from './components/postInputs';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Posts from './components/posts';\n\n\nfunction App() {\n    return (\n    <div className=\"App\">\n      <Router>\n        \n      <nav className='header'>\n          <ul>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n            <li>\n              <Link to=\"/addUser\">Add User</Link>\n            </li>\n            <li>\n              <Link to=\"/tweets\">Tweets</Link>\n            </li>\n            <li>\n              <Link to=\"/addTweet\">Add tweet</Link>\n            </li>\n          </ul>\n        </nav>\n      <Switch >\n          <Route path=\"/users\">\n            <Users/>\n          </Route>\n          <Route path=\"/addUser\">\n            <UserInputs />\n          </Route>\n          <Route path=\"/addTweet\">\n            <PostInputs />\n          </Route>\n          <Route path=\"/tweets\">\n            <Posts />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import * as Actions from '../actions/posts.actions';\r\n\r\n\r\nconst initialState = {\r\n  posts: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Actions.GET_POSTS:\r\n      return {\r\n        ...state,\r\n        posts:action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import * as Actions from '../actions/users.actions';\r\n\r\nconst initialState = {\r\n  users: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Actions.GET_USERS:\r\n      return {\r\n        ...state,\r\n        users: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\nimport posts from './posts.reducers';\r\nimport users from './users.reducers'\r\nconst reducers = combineReducers({\r\n    posts,\r\n    users\r\n});\r\n\r\nexport default reducers;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n  );\r\n   \r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}